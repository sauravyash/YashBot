"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}function trimWrappers(e){return e.replace(/\[\[/g,"").replace(/\]\]/g,"").replace(/\{\{/g,"").replace(/\}\}/g,"").trim()}function trimOr(e){var t=e.indexOf("|");return-1!==t?e.substring(0,t):e}function getValue(e,t){if(!e)return null;var r=e.trim().replace(/File:/,"").replace(/\{\{\d+\}\}/g,"").replace(extraPropertyPattern,"").replace(endingPattern,"");if("y"===r||"yes"===r)return!0;if("birthPlace"==t)return e.trim();var a=r.match(linksPattern);return a?a[0].split(linkSeparatorPattern).filter(function(e){return e}):trimOr(trimWrappers(r))}function dataType(e){var t=e.globalPattern,r=e.parsePattern,a=e.parse,n=e.variable,l=e.name;return function(e){var i=e.match(t);if(!i){var s;return s={},defineProperty(s,l,[]),defineProperty(s,"sourceAfter",e),s}var o=i.map(function(e){return a(e.match(r))}),u=i.reduce(function(e,t,r){return e.replace(t,"$"+n+"_"+r)},e);return{data:defineProperty({},l,o),sourceAfter:u}}}function cleanSource(e){return e.replace(/''/g,"").replace(/\|display=inline/g,"").replace(/<br\s?\/?>/g,",").replace(/<ref(\s\w+=[^>]+)?>.*<\/ref>/g,"").replace(/<ref(\s\w+=[^>]+)?\s?\/>/g,"").replace(/&nbsp;/g," ").replace(commentsPattern,"").replace("|''See list''","")}function byDataHandler(e,t){var r=e.source,a=e.context,n=t(r),l=n.data,i=n.sourceAfter;return{context:Object.assign({},a,l),source:i}}function extractData(e){var t=cleanSource(e);return dataTypes$1.map(function(e){return e.handler}).reduce(byDataHandler,{context:{},source:t})}function findPropertyList(e){var t=e.match(keyValueGlobalPattern);return t?t.map(function(e){var t=keyValuePattern.exec(e);if(!t)return null;var r=slicedToArray(t,3),a=r[1],n=r[2],l=camelCase(a.trim());return{key:l,value:getValue(n,l)}}).filter(function(e){return e}):[]}function fillVariables(e,t,r){var a=r.simplifyDataValues;if("string"!=typeof e)throw new Error("Something went wrong. Could not fill variables in: ("+(void 0===e?"undefined":_typeof(e))+") "+JSON.stringify(e));var n=dataTypes$1.find(function(t){return e.match(t.pattern)});if(n){var l=n.pattern.exec(e),i=slicedToArray(l,2),s=i[0],o=i[1],u=t[n.name][parseInt(o,10)];return a||"string"!=typeof u?u:e.replace(s,u)}return e}function fillVariablesUntilDone(e,t,r){if(e instanceof Date)return e;if("number"==typeof e)return e;if(Array.isArray(e))return e.map(function(e){return fillVariablesUntilDone(e,t,r)});if("object"===(void 0===e?"undefined":_typeof(e)))return Object.keys(e).reduce(function(a,n){return Object.assign(a,defineProperty({},n,fillVariablesUntilDone(e[n],t,r)))},{});var a=fillVariables(e,t,r);return a===e?e:fillVariablesUntilDone(a,t,r)}function handleSmallData(e,t,r){var a=r.simplifyDataValues;if("string"==typeof e&&e.match(smallDataType.pattern)){var n=e.replace(smallDataType.pattern,"").replace(/,/,"").trim(),l=smallDataType.pattern.exec(e),i=slicedToArray(l,2),s=i[1],o=t[smallDataType.name][parseInt(s,10)],u={primary:getVariableValue(n,t,{simplifyDataValues:a}),secondary:getVariableValue(o,t,{simplifyDataValues:a})};return a?u.primary:u}return null}function getVariableValue(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=r.simplifyDataValues,n=void 0===a||a,l=handleSmallData(e,t,{simplifyDataValues:n});return l||fillVariablesUntilDone(e,t,{simplifyDataValues:n})}function reduceVariable(e,t,r,a){if(null===t)return null;if("boolean"==typeof t)return t;if(Array.isArray(t))return t.map(function(e){return getVariableValue(e,r,a)});if(e.match(/areaTotal/)||e.match(/population/)){var n=numberParse(t);if(!1===n&&(n=parseFloat(t,10)),!isNaN(n))return n}if(e.match(/date/i)){var l=+new Date(t);if(!isNaN(l))return new Date(t)}var i=getVariableValue(t,r,a);return Array.isArray(i)?i.map(function(e){return getVariableValue(e,r,a)}):i}function byVariableReduction(e,t){return function(r,a){var n=a.key,l=a.value,i=reduceVariable(n,l,e,t);return""===i||null===i?r:Object.assign({},r,defineProperty({},n,i))}}function extractProperties(e,t){var r=e.source,a=e.context;return findPropertyList(r).reduce(byVariableReduction(a,t),{})}function transformProperties(e){return Object.keys(e).reduce(function(t,r){var a=e[r],n=r.match(blankNamePattern);if(n){var l=n[1]||"",i=e["blank"+l+"NameSec2"],s=e["blank"+l+"InfoSec2"];return"string"!=typeof i?t:Object.assign(t,defineProperty({},camelCase(i),s))}return r.match(blankInfoPattern)?t:Object.assign(t,defineProperty({},r,a))},{})}var camelCase=_interopDefault(require("camelcase")),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},defineProperty=function(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e},slicedToArray=function(){function e(e,t){var r=[],a=!0,n=!1,l=void 0;try{for(var i,s=e[Symbol.iterator]();!(a=(i=s.next()).done)&&(r.push(i.value),!t||r.length!==t);a=!0);}catch(e){n=!0,l=e}finally{try{!a&&s.return&&s.return()}finally{if(n)throw l}}return r}return function(t,r){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return e(t,r);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),smallGlobalPattern=/\{\{small\|([^\}\}]+)\}\}/g,smallPattern=/small\|([^\}\}]+)\}\}/,small={globalPattern:smallGlobalPattern,parsePattern:smallPattern,parse:function(e){return slicedToArray(e,2)[1]},variable:"SMALL",name:"smalls"},flagGlobalPattern=/\{\{flag\|([^\}\}]+)\}\}/g,flagPattern=/flag\|([^\}\}]+)\}\}/,flag={globalPattern:flagGlobalPattern,parsePattern:flagPattern,parse:function(e){return slicedToArray(e,2)[1]},variable:"FLAG",name:"flags"},coordsGlobalPattern=/\{\{coord\|([^\}\}]+)\}\}/g,coordsPattern=/coord\|([^\}\}]+)\}\}/,coords={globalPattern:coordsGlobalPattern,parsePattern:coordsPattern,parse:function(e){return slicedToArray(e,2)[1]},variable:"COORD",name:"coords"},globalPattern=/\[\[([^\]\|]+)\|?([^\]]+)?\]\]/g,pattern=/\[\[([^\]\|]+)\|?([^\]]+)?\]\]/,instances={globalPattern:globalPattern,parsePattern:pattern,parse:function(e){var t=slicedToArray(e,3),r=t[1],a=t[2];return r||a},variable:"INSTANCE",name:"instances"},extraPropertyPattern=/\n?\s?\|\s?\w+$/,endingPattern=/\n\}\}$/,linksPattern=/((\$\w+_\d+)\s*,?\s*){2,}/g,linkSeparatorPattern=/[,\s?]/g,listItemPrefixPattern=/^\|\s?/,unbulletedListGlobalPattern=/\{\{(?:unbulleted list|ubl|ubt|ublist|unbullet)\s?\|([^\}\}]+)\}\}/g,unbulletedListItemPattern=/\|\s*([^|}]+)/g,unbulletedLists={globalPattern:unbulletedListGlobalPattern,parsePattern:unbulletedListItemPattern,parse:function(e){return e?e.map(function(e){return e.replace(listItemPrefixPattern,"").trim()}).filter(function(e){return e&&e.length}):[]},variable:"UNBULLETED_LIST",name:"unbulletedLists"},listItemPrefixPattern$1=/^\*\s*/,plainListGlobalPattern=/\n(\*\s*[^*|]+)+/g,plainListItemPattern=/\*\s*([^*|]+)/g,unmarkedLists={globalPattern:plainListGlobalPattern,parsePattern:plainListItemPattern,parse:function(e){return e?e.map(function(e){return e.replace(listItemPrefixPattern$1,"").trim()}).filter(function(e){return e&&e.length}):[]},variable:"UNMARKED_LIST",name:"unmarkedLists"},listItemPrefixPattern$2=/^\*\s?/,plainListGlobalPattern$1=/\{\{f?p?P?l?a?i?n?t?list\s?\|([^\}\}]+)\}\}/g,plainListItemPattern$1=/\*\s*([^*}]+)/g,plainLists={globalPattern:plainListGlobalPattern$1,parsePattern:plainListItemPattern$1,parse:function(e){return e?e.map(function(e){return e.replace(listItemPrefixPattern$2,"").trim()}).filter(function(e){return e&&e.length}):[]},variable:"PLAIN_LIST",name:"plainLists"},marriageGlobalPattern=/\{\{Marriage\|([^\}\}]+)\}\}/g,marriagePattern=/Marriage\|([^|]+)\|(.*)\}\}/,marriages={globalPattern:marriageGlobalPattern,parsePattern:marriagePattern,parse:function(e){var t=slicedToArray(e,3);return{who:t[1],married:t[2]}},variable:"MARRIAGE",name:"marriages"},otherGlobalPattern=/\{\{([^|\n]+)\|([^|\n]+)\|?([^\}\n]+)?\}\}/g,otherPattern=/\{\{([^|\n]+)\|([^|\n]+)\|?([^\}\n]+)?\}\}/,other={globalPattern:otherGlobalPattern,parsePattern:otherPattern,parse:function(e){var t=slicedToArray(e,4),r=t[1];t[2],t[3];return r},variable:"OTHER",name:"others"},birthDateGlobalPattern=/\{\{birth\sdate([^\}\}]+)\}\}/gi,birthDatePattern=/(\d+)\|(\d+)\|(\d+)/,millisInYear=31536e6,birthDates={globalPattern:birthDateGlobalPattern,parsePattern:birthDatePattern,parse:function(e){var t=slicedToArray(e,4),r=t[1],a=t[2],n=t[3],l=new Date(r,a-1,n);return{date:l,age:Math.floor((Date.now()-+l)/millisInYear)}},variable:"BIRTH_DATE",name:"birthDates"},URLGlobalPattern=/\{\{URL\|([^\}\}]+)\}\}/g,URLPattern=/URL\|([^\}\}]+)\}\}/,url={globalPattern:URLGlobalPattern,parsePattern:URLPattern,parse:function(e){return slicedToArray(e,2)[1]},variable:"URL",name:"urls"},dataTypes=[instances,small,flag,coords,marriages,birthDates,unbulletedLists,url,other,plainLists,unmarkedLists],dataTypes$1=dataTypes.map(function(e){return{handler:dataType(e),name:e.name,pattern:new RegExp("\\$"+e.variable+"_(\\d+)")}}),commentsPattern=/<!--.*-->/g,keyValueGlobalPattern=/\|\s*([-\w\s]+)\s*=\s*([^|]+)?/g,keyValuePattern=/\|\s*([-\w\s]+)\s*=\s*([^|]+)?/,numberParse=function(e){return"string"==typeof e&&(e=e.trim().replace(/ /g,""),e.match(/,/)&&e.match(/\./)?e.indexOf(",")<e.indexOf(".")?parseEnglish(e):parseSpanish(e):e.match(/,/)&&!e.match(/\./)?e.match(/,/g).length>1?parseEnglish(e):e.match(/,[0-9]{3}($|^[0-9])/)?parseEnglish(e):parseSpanish(e):!e.match(/,/)&&e.match(/\./)?e.match(/\./g).length>1?parseSpanish(e):e.match(/\.[0-9]{3}($|^[0-9])/)?parseSpanish(e):parseEnglish(e):(+e).toString()===e&&+e)},parseEnglish=function(e){return+e.replace(/,/g,"")},parseSpanish=function(e){return+e.replace(/\./g,"").replace(/,/g,".")},smallDataType=dataTypes$1.find(function(e){return"smalls"===e.name}),blankNamePattern=/blank(\d+)?NameSec2/,blankInfoPattern=/blank(\d+)?InfoSec2/,index=function(e,t){return transformProperties(extractProperties(extractData(e),t))};module.exports=index;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
